Imports System
Imports System.Data.SqlClient

Public Class AzureDBFDemo

    Const DBF_NAME As String = "userDatabase"
    Const TABLE_NAME As String = "userTable"
    Dim ds As New DataSet

    ' Keep track of the current row selected by user
    Dim currentRow As Integer

    Private Sub AzureDBFDemo_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        populateGrid(DBF_NAME, TABLE_NAME, "SELECT * FROM [" & TABLE_NAME & "]")
    End Sub

    Private Sub populateGrid(ByVal dbfName As String, ByVal tableName As String, ByVal strSQL As String)
        Dim con As New SqlConnection
        Dim da As New SqlDataAdapter

        'Clear out old data
        ds.Clear()
        'Create the Connection 
        '   Paste in Connection string from Azure
        '   Don't forget to add in your password.
        con = New SqlConnection("Server=tcp:t7e2kt3cax.database.windows.net,1433;Database=userDatabase;User ID=peter.johnson@t7e2kt3cax;Password=Please99!;Trusted_Connection=False;Encrypt=True;Connection Timeout=30;")
        Try
            con.Open()
            da.SelectCommand = New SqlCommand(strSQL, con)
            da.Fill(ds, TABLE_NAME)
            con.Close()

            'Fill the form objects with data
            dg.DataSource = ds.Tables(0)
            'dg.DataMember = TABLE_NAME
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

    End Sub

    Private Sub dg_CellEndEdit(sender As Object, e As DataGridViewCellEventArgs) Handles dg.CellEndEdit
        '=========================
        ' CLEAR ERROR MESSAGES
        ' that may have been set by CellEnter( )
        '=========================
        dg.Rows(e.RowIndex).ErrorText = String.Empty
    End Sub

    Private Sub dg_CellEnter(sender As Object, e As DataGridViewCellEventArgs) Handles dg.CellEnter
        '=========================
        ' CELL ENTER EVENT
        '=========================
        ' Print out current cell data in console
        Dim currentCol As Integer = e.ColumnIndex
        currentRow = e.RowIndex
        Console.WriteLine("Value: " & dg.Rows(e.RowIndex).Cells(e.ColumnIndex).Value)
        Console.WriteLine("Row: " & currentRow)
        Console.WriteLine("Col: " & currentCol)

        ' Update the text boxes, checking for empty rows
        If (currentRow < dg.RowCount - 1) Then
            lblUserID.Text = ds.Tables(0).Rows(currentRow).Item("userID").tostring
            lblPassword.Text = ds.Tables(0).Rows(currentRow).Item("password").ToString
            lblEmail.Text = ds.Tables(0).Rows(currentRow).Item("email").ToString
        Else
            lblUserID.Text = ""
            lblPassword.Text = ""
            lblEmail.Text = ""
        End If
    End Sub

    Private Sub dg_CellValidating(sender As Object, e As DataGridViewCellValidatingEventArgs) Handles dg.CellValidating
        '=========================
        ' VALIDATE USER INPUT
        '=========================
        'Any user input that is fixed is reset by CellEndEdit( )
        ' === userID Field ===
        If e.ColumnIndex = 1 Then
            If IsNumeric(e.FormattedValue) Then
                dg.Rows(e.RowIndex).ErrorText = "The User ID must be contain text."
                e.Cancel = True
            Else ' error was fixed by user, so reset
                dg.Rows(e.RowIndex).ErrorText = ""
            End If
        End If
    End Sub


    Private Sub dg_UserDeletingRow(sender As Object, e As DataGridViewRowCancelEventArgs) Handles dg.UserDeletingRow
        '=========================
        ' DELETE ROW -- Don't confuse this event with UserDeletedRow( )
        '=========================
        ' Is this the empty row or not?d
        If (Not e.Row.IsNewRow) Then
            Dim response As DialogResult = MessageBox.Show("Are you sure you want to delete this row?", _
                "Delete row?", MessageBoxButtons.YesNo, MessageBoxIcon.Question, _
                MessageBoxDefaultButton.Button2)
            If (response = DialogResult.No) Then
                e.Cancel = True
            Else
                dg.Rows.Remove(dg.SelectedRows(0))
            End If
        End If

    End Sub

    Private Sub btnSave_Click(sender As Object, e As EventArgs) Handles btnSave.Click
        '=========================
        ' UPDATE ROW in TABLE
        '=========================
        'IMPORTANT NOTE: This SQL only updates the UserName field. You will have to
        ' add fields to the SQL statement in order to update all of the columns.
        ' This sub only updates the current row for efficiency.
        '
        ' Do not update the key field (in this example: id). 
        ' The user could change that to a number that is already in use by the table
        '
        'TIP: When writing SQL UPDATE statements add only one field in an UPDATE statement at a time.
        '     Watch out for the missing ' ' around each string field and spaces around keywords.

        ' Extract the new information from the datagrid
        Dim thisID As Integer = ds.Tables(0).Rows(currentRow).Item("id")
        Dim thisUserID As String = ds.Tables(0).Rows(currentRow).Item("userID").ToString
        Dim thisPassword As String = ds.Tables(0).Rows(currentRow).Item("password").ToString
        Dim thisEmail As String = ds.Tables(0).Rows(currentRow).Item("Email").ToString
        ' Write the SQL statement. Don't forget to put single quotes around each VARCHAR field
        ' BE SMART! Hard-code in the values first before adding the variables:
        ' "UPDATE userTable SET userID = 'ginny99' WHERE id = 3"
        Dim strSQL As String = "UPDATE [" & TABLE_NAME & "] SET userID = '" & thisUserID & "' WHERE id = " & thisID
        sendQuery(strSQL)

    End Sub

    Private Sub btnAdd_Click(sender As Object, e As EventArgs) Handles btnAdd.Click
        '=========================
        ' INSERT A NEW ROW
        '=========================
        ' id int,
        ' userID varchar(30),
        ' userName varchar(25),
        ' password varchar(25),
        ' email varchar(30),
        ' phone varchar(10),

        ' Build SQL INSERT statement using data from textboxes
        Dim strSQL As String = "INSERT INTO [" & TABLE_NAME _
        & "] (userID, userName, password, email, phone) " _
        & " VALUES ('" _
        & txtUserID.Text + "', '" _
        & txtUserName.Text + "', '" _
        & txtPassword.Text + "', '" _
        & txtEmail.Text + "', '" _
        & txtPhone.Text + "')"

        ' Output to the Console to debug the SQL
        Console.WriteLine("strSQL = " & strSQL)

        sendQuery(strSQL)
    End Sub

    Private Sub sendQuery(strSQL As String)
        '=========================
        ' RUN SQL STATEMENT - REFRESH GRID
        '=========================
        Dim con = New SqlConnection("Server=tcp:t7e2kt3cax.database.windows.net,1433;Database=userDatabase;User ID=peter.johnson@t7e2kt3cax;Password=Please99!;Trusted_Connection=False;Encrypt=True;Connection Timeout=30;")
        con.Open()
        ' Create the command with the SQL, connection, and transaction objects
        Dim cmd As New SqlCommand(strSQL, con)
        ' Execute the query getting the number of records affected (should be 1)
        Dim recordCount As Integer = cmd.ExecuteNonQuery()
        If recordCount = 1 Then
            Console.WriteLine("Update was successful.")
        Else
            Console.WriteLine("Update was NOT successful.")
        End If
        con.Close()
        'Redisplay the grid to show updated records
        Dim newSQLString As String = "SELECT * FROM [" & TABLE_NAME & "]"
        populateGrid(DBF_NAME, TABLE_NAME, newSQLString)
    End Sub

    Private Sub btnDelete_Click(sender As Object, e As EventArgs) Handles btnDelete.Click
        '=========================
        ' DELETE A ROW
        '=========================
        ' get id of current row set by dgResult_CellEnter( )
        Dim thisID As Integer = ds.Tables(0).Rows(currentRow).Item("id")
        ' Double check with user
        Dim response As DialogResult = MessageBox.Show("Are you sure you want to delete this row?", _
            "Delete row?", MessageBoxButtons.YesNo, MessageBoxIcon.Question, _
            MessageBoxDefaultButton.Button2)
        If (response = DialogResult.Yes) Then
            Dim strSQL As String = "DELETE FROM [" & TABLE_NAME & "] WHERE id = " & thisID
            ' Output line to Console to double check SQL Syntax
            Console.WriteLine("strSQL = " & strSQL)
            sendQuery(strSQL)
        End If
    End Sub
End Class



